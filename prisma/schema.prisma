generator client {
  provider   = "prisma-client-js"
  engineType = "data-proxy"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DATABASE_DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id                           String                @id @default(uuid()) @db.Uuid
  clerkUserId                  String                @unique
  name                         String?
  email                        String?               @unique
  createdAt                    DateTime              @default(now()) @map("created_at")
  updatedAt                    DateTime              @updatedAt @map("updated_at")
  veriffStatus                 String?
  verificationStep             Int                   @default(0)
  phoneNumber                  String?
  points_balance               Int?                  @default(0)
  full_name                    String?
  verification_status          String?               @default("pending")
  employClerkUserId            String?               @unique
  notificationPreferences      Json?                 @default("{\"dailySummary\": true, \"urgentAlerts\": true}")
  adminNotificationPreferences Json?                 @default("{\"systemAlerts\": true, \"payoutNotifications\": true, \"verificationNotifications\": true}")
  documents                    Document[]
  verificationSessions         VerificationSession[]

  @@index([clerkUserId])
  @@map("users")
}

model Document {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  documentType String
  documentUrl  String
  encrypted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  publicId     String
  temp_id      String?  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("documents")
}

model VerificationSession {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId    String
  status       String
  reason       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  temp_user_id String?  @db.Uuid
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("verification_sessions")
}

model activities {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String    @db.Uuid
  type         String
  title        String
  description  String?
  points       Int       @default(0)
  status       String    @default("pending")
  completed_at DateTime? @db.Timestamp(6)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  metadata     Json?

  @@index([user_id], map: "idx_activities_user_id")
}

model activity_logs {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  activity_id String?   @db.Uuid
  action      String
  metadata    Json?     @default("{}")
  created_at  DateTime? @default(now()) @db.Timestamp(6)

  @@index([activity_id], map: "idx_activity_logs_activity_id")
  @@index([user_id], map: "idx_activity_logs_user_id")
}

model ad_interactions {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String    @db.Uuid
  ad_id            String
  interaction_type String
  duration         Int?
  created_at       DateTime? @default(now()) @db.Timestamp(6)

  @@index([user_id], map: "idx_ad_interactions_user_id")
}

model bank_accounts {
  id                String   @id @db.Uuid
  user_id           String   @db.Uuid
  bankName          String
  accountNumber     String
  routingNumber     String
  accountType       String
  accountHolderName String
  verified          Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime

  @@index([user_id], map: "idx_bank_accounts_user_id")
}

model employ_payout_requests {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  amount     Int
  status     String?   @default("pending")
  created_at DateTime? @default(now()) @db.Timestamp(6)

  @@index([user_id], map: "idx_employ_payout_requests_user_id")
}

model employ_rewards {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  points      Int
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)

  @@index([user_id], map: "idx_employ_rewards_user_id")
}

model notifications {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  title      String
  message    String
  type       String
  read       Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)

  @@index([user_id], map: "idx_notifications_user_id")
}

model payouts {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String    @db.Uuid
  amount       Int
  status       String?   @default("pending")
  processed_by String?   @db.Uuid
  processed_at DateTime? @db.Timestamp(6)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  notes        String?

  @@index([processed_by], map: "idx_payouts_processed_by")
  @@index([user_id], map: "idx_payouts_user_id")
}
